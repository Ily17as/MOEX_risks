import json
import requests
import streamlit as st
import pandas as pd
from datetime import datetime, date

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="RiskLens ‚Äî –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ VaR/CVaR –∏ –≥—Ä–µ–∫–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üìä RiskLens ‚Äî –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ VaR/CVaR –∏ –≥—Ä–µ–∫–æ–≤")

# --- Sidebar: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞")
METHOD = st.sidebar.selectbox("–ú–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞", ["historical", "parametric"])
CONFIDENCE = st.sidebar.slider("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è", 0.90, 0.995, 0.99, format="%.3f")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ---
if "portfolio" not in st.session_state:
    st.session_state.portfolio = []

# --- –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è ---
st.subheader("1) –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å")
with st.form("portfolio_form"):
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", use_container_width=True, on_click=lambda: st.session_state.portfolio.append({
        "ticker": "",
        "type": "stock",
        "position": 0.0,
        "underlying": "",
        "strike": 0.0,
        "expiry": date.today(),
        "implied_vol": 0.0,
        "option_type": "call"
    })):
        pass

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for idx, inst in enumerate(st.session_state.portfolio):
        st.markdown(f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç #{idx+1}**")
        cols = st.columns([1.5, 1, 1, 1, 1, 1, 1])
        inst["ticker"] = cols[0].text_input("Ticker", inst["ticker"], key=f"ticker_{idx}")
        inst["type"] = cols[1].selectbox("–¢–∏–ø", ["stock", "future", "option"],
                                         index=["stock", "future", "option"].index(inst["type"]),
                                         key=f"type_{idx}")
        inst["position"] = cols[2].number_input("–ü–æ–∑–∏—Ü–∏—è", value=inst["position"], key=f"position_{idx}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤
        if inst["type"] == "option":
            inst["underlying"] = cols[3].text_input("–ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤", inst["underlying"], key=f"under_{idx}")
            inst["strike"] = cols[4].number_input("–°—Ç—Ä–∞–π–∫", value=inst["strike"], key=f"strike_{idx}")
            inst["expiry"] = cols[5].date_input("–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è", value=inst["expiry"], key=f"expiry_{idx}")
            inst["implied_vol"] = cols[6].number_input("–ò–º–ø–ª. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", value=inst["implied_vol"],
                                                       format="%.2f", key=f"vol_{idx}")
            inst.setdefault("option_type", "call")
            inst["option_type"] = cols[6].selectbox("call/put", ["call", "put"],
                                                    index=["call", "put"].index(inst["option_type"]),
                                                    key=f"otype_{idx}")

    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
    calc = st.form_submit_button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å VaR/CVaR –∏ –≥—Ä–µ–∫–∏")


# --- –í—ã–∑–æ–≤ –±—ç–∫–µ–Ω–¥–∞ –∏ –≤—ã–≤–æ–¥ ---
if calc:
    API_URL = "http://localhost:8000/calc"
    payload = {
        "portfolio": [],
        "method": METHOD,
        "confidence": CONFIDENCE
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    for inst in st.session_state.portfolio:
        row = inst.copy()
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∫ ISO-—Ñ–æ—Ä–º–∞—Ç—É
        if isinstance(row.get("expiry"), date):
            row["expiry"] = row["expiry"].isoformat()
        payload["portfolio"].append(row)

    # –ó–∞–ø—Ä–æ—Å –∫ API
    try:
        response = requests.post(API_URL, json=payload, timeout=60)
        response.raise_for_status()
        data = response.json()

        # --- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
        st.subheader("üìâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        m1, m2, m3 = st.columns(3)
        m1.metric("Portfolio Value", f"{data.get('portfolio_value', 0):,.2f}")
        m2.metric("VaR",             f"{data.get('VaR', 0):,.2f}")
        m3.metric("CVaR",            f"{data.get('CVaR', 0):,.2f}")
        st.caption(f"–ú–µ—Ç–æ–¥: {data['method']} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {data['confidence']*100:.1f}%")

        # --- –ú–∞—Ç—Ä–∏—Ü—ã —Ä–∏—Å–∫–∞ ---
        cov = data.get("meta", {}).get("cov_matrix")
        corr = data.get("meta", {}).get("corr_matrix")
        if cov and corr:
            st.subheader("üî¢ –ú–∞—Ç—Ä–∏—Ü—ã —Ä–∏—Å–∫–∞")
            c1, c2 = st.columns(2)
            c1.dataframe(pd.DataFrame(cov),  use_container_width=True)
            c2.dataframe(pd.DataFrame(corr), use_container_width=True)

        # --- –î–µ—Ç–∞–ª–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ---
        st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º")
        df_details = pd.DataFrame(data.get("details", []))
        st.dataframe(df_details, use_container_width=True)
        csv = df_details.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏ CSV", csv, "details.csv", "text/csv")
        try:
            response = requests.post(API_URL, json=payload, timeout=60)
            response.raise_for_status()
        except requests.HTTPError:
            st.error(f"Status: {response.status_code}")
            st.text(response.text)
            st.json(payload)
            raise
    except requests.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
    except ValueError:
        st.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
